// Merge Sort Algorithm


import java.util.*;
 
class Solution{
    public static void mergeSort(int[] arr, int low, int high){
        if(low>=high) return;
 
        int mid = (low+high)/2;
        mergeSort(arr, low, mid);
        mergeSort(arr, mid+1, high);
        merge(arr, low, mid, high);
    }
 
    public static void merge(int[] arr, int low, int mid, int high){
        ArrayList<Integer> array = new ArrayList<>();
        int left = low; 
        int right = mid+1;
 
       while(left<=mid && right<=high){
           if(arr[left]< arr[right]){
               array.add(arr[left]);
               left++;
           }
           else{
               array.add(arr[right]);
               right++;
           }
       }
       while(left<=mid){
           array.add(arr[left]);
           left++;
       }
       while(right <= high){
           array.add(arr[right]);
           right++;
       }
       for(int i=low; i<=high; i++){
           arr[i] = array.get(i-low);
       }
    }
}
 
public class Merge {
    public static void main(String[] args) {
        int n = 7;
        int arr[] = { 9, 4, 7, 6, 3, 1, 5 };
        System.out.println("Before sorting array: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        Solution.mergeSort(arr, 0, n - 1);
        System.out.println("After sorting array: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
}